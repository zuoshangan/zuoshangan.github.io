<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-20T09:50:19.235Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liufei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java序列化</title>
    <link href="http://yoursite.com/2019/07/20/Java%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2019/07/20/Java序列化/</id>
    <published>2019-07-20T09:10:35.000Z</published>
    <updated>2019-07-20T09:50:19.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p> 在远程调用中，需要把参数和返回值通过网络传输，这时就要用到序列化将对象转变成字节流，从一端到另一端之后再反序列化回来变成对象，因此，我们需要先了解一下序列化和反序列化。</p><p><strong>序列化(Serialization)</strong>：也称为编码(Encode)，将对象序列化为字节数组，用于网络传输、数据持久化等用途；</p><p><strong>反序列化(Deserialization)</strong>：也称为解码(Decode)，负责从网络、磁盘中读取的字节数组还原成原始对象（通常是原始对象的副本）。</p><h2 id="Java-默认序列化机制"><a href="#Java-默认序列化机制" class="headerlink" title="Java 默认序列化机制"></a>Java 默认序列化机制</h2><p>Java 提供默认的序列化机制，需要序列化的对象只需要实现 java.io.Serializable 接口并生成序列化 ID，这个类就可以通过 java.io.ObjectInput 和 java.io.ObjectOutput 序列化和反序列。</p><p>也可以通过 Externalizable 接口实现序列化和反序列化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Externalizable</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一旦某个类实现了 Serializable 接口，那么这个类就是可序列化的，可以通过 ObjectOutputStream 来序列化对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">ObjectOutputStream outputStream = </span><br><span class="line">    <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"object.txt"</span>));</span><br><span class="line"></span><br><span class="line">outputStream.writeObject(object);</span><br></pre></td></tr></tbody></table></figure><p>如果希望从二进制流中恢复对象，则需要通过 ObjectInputStream 来反序列化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream inputStream =</span><br><span class="line">    <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"object.txt"</span>));</span><br><span class="line"></span><br><span class="line">Person person = (Person)inputStream.readObject();</span><br></pre></td></tr></tbody></table></figure><p><font color="red">如果使用序列化机制向文件写入多个 Java 对象，在使用反序列化机制恢复对象时必须按照实际写入的顺序读取。</font></p><p>当一个可序列化类由多个父类时，这些父类要么有无参构造方法，要么也是可序列化的，否则就会抛出 InvalidClassException，如果这个父类时不可序列化的，只是带无参构造方法，则该父类中定义的成员变量值不会序列化到二进制流中。</p><h3 id="Java-序列化算法"><a href="#Java-序列化算法" class="headerlink" title="Java 序列化算法"></a>Java 序列化算法</h3><p>Java 序列化采用一种特殊的算法，具有如下特点：</p><ul><li>所有保存到磁盘的对象都要一个序列化编号；</li><li>当程序视图序列化一个对象时，程序首先检查该对象是否已经序列化过，只有该对象从未被序列化，系统才会将该对象转换为字节序列输出；</li><li>如果某个对象已经序列化过，程序将直接输出一个序列化编号，而不是再次重新序列化该对象；</li></ul><p>递归序列化：</p><p>当对某个对象进行序列化，系统会自动把该对象的所有实例变量进行序列化，如果某个实例变量引用另外一个对象，则被引用的对象也会被序列化，如果被引用的对象实例变量也引用了其他对象，则被引用的对象也会被序列化，这种情况就称为递归序列化。</p><h3 id="transient-关键字"><a href="#transient-关键字" class="headerlink" title="transient 关键字"></a>transient 关键字</h3><p>在某些特殊场景，比如在一个类中包含的某些实例变量是敏感信息，如银行账户信息等，那么可以在该实例变量前增加 transient 关键字，那么 Java 序列化机制就会在序列化时不会序列化该变量。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, String phone)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Person 构造方法"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略getter/setter方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> (ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(</span><br><span class="line">        <span class="keyword">new</span> FileOutputStream(<span class="string">"E:/download/transient.txt"</span>));</span><br><span class="line">         ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(</span><br><span class="line">             <span class="keyword">new</span> FileInputStream(<span class="string">"E:/download/transient.txt"</span>))) {</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"xiaoxiao"</span>, <span class="number">20</span>, <span class="string">"18200594087"</span>);</span><br><span class="line">        oos.writeObject(person);</span><br><span class="line">        person = (Person)ois.readObject();</span><br><span class="line">        <span class="comment">// 输出null</span></span><br><span class="line">        System.out.println(person.getPhone());</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Hessian序列化机制"><a href="#Hessian序列化机制" class="headerlink" title="Hessian序列化机制"></a>Hessian序列化机制</h2><p>Hessian 序列化比 Java 序列化高效很多，而且生成的字节流也要短很多。但相对来说没有 Java 序列化可靠，而且也不如 Java序列化支持的全面，主要在于他们的实现方式不同：</p><ul><li>Java 序列化会把要序列化的对象类的元数据和业务数据全部序列化为字节流，而且是把整个继承关系上的东西全部序列化了。它序列化出来的字节流是对那个对象结构到内容的完全描述，包含所有的信息，因此效率较低而且字节流比较大。但是由于确实是序列化了所有内容，所以可以说什么都可以传输，因此也更可用和可靠。</li><li><code>Hessian</code>序列化，它的实现机制是着重于数据，附带简单的类型信息的方法。就像<code>Integer a = 1</code>，<code>Hessian</code>会序列化成<code>I 1</code>这样的流，<code>I</code>表示<code>int or Integer</code>，<code>1</code>就是数据内容。而对于复杂对象，通过<code>Java</code>的反射机制，<code>Hessian</code>把对象所有的属性当成一个<code>Map</code>来序列化，包含了基本的类型描述和数据内容。而在序列化过程中，如果一个对象之前出现过，<code>Hessian</code>会直接插入一个<code>R index</code>这样的块来表示一个引用位置，从而省去再次序列化和反序列化的时间。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序列化&quot;&gt;&lt;a href=&quot;#序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化&quot;&gt;&lt;/a&gt;序列化&lt;/h1&gt;&lt;p&gt; 在远程调用中，需要把参数和返回值通过网络传输，这时就要用到序列化将对象转变成字节流，从一端到另一端之后再反序列化回来变成对象，因此
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/20/hello-world/"/>
    <id>http://yoursite.com/2019/07/20/hello-world/</id>
    <published>2019-07-20T07:50:55.525Z</published>
    <updated>2019-07-20T09:42:23.112Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
